[
    {
        "id": "356ea6f4c1f619bc",
        "type": "tab",
        "label": "Telegram Alert System Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d0f616a33e4a23c2",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "662fd1abba56a419",
        "type": "telegram bot",
        "botname": "FLORA_BOT",
        "usernames": "LucaMF",
        "chatids": "${CHAT_ID}",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "addressfamily": "",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "edf1038d908d0e6f",
        "type": "influxdb",
        "hostname": "172.30.0.102",
        "port": "8086",
        "protocol": "http",
        "database": "forestsensors",
        "name": "IoT_Influx",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://host.docker.internal:8086",
        "timeout": "",
        "rejectUnauthorized": true
    },
    {
        "id": "61699ef14cb42f13",
        "type": "mqtt-broker",
        "name": "Notification Broker",
        "broker": "http://host.internal.docker",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "2741cadd25e52534",
        "type": "telegram sender",
        "z": "356ea6f4c1f619bc",
        "name": "Send Alerts to User",
        "bot": "662fd1abba56a419",
        "haserroroutput": false,
        "outputs": 1,
        "x": 950,
        "y": 160,
        "wires": [
            [
                "882931460110c834"
            ]
        ]
    },
    {
        "id": "882931460110c834",
        "type": "debug",
        "z": "356ea6f4c1f619bc",
        "name": "Debug Telegram Bot",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 80,
        "wires": []
    },
    {
        "id": "5fe460c06e16102f",
        "type": "influxdb in",
        "z": "356ea6f4c1f619bc",
        "influxdb": "edf1038d908d0e6f",
        "name": "Access InfluxDB",
        "query": "from(bucket: \"AFLORA\")\n|> range(start: -10s)\n|> filter(fn: (r) => r[\"_measurement\"] == \"sensor-values\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "AFLORA",
        "x": 340,
        "y": 160,
        "wires": [
            [
                "db556ada97593f4e",
                "6e89c57ff2394507",
                "c02720065eda1165"
            ]
        ]
    },
    {
        "id": "db556ada97593f4e",
        "type": "debug",
        "z": "356ea6f4c1f619bc",
        "name": "Debug InfluxDB",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 80,
        "wires": []
    },
    {
        "id": "0315a041e107c085",
        "type": "inject",
        "z": "356ea6f4c1f619bc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "5fe460c06e16102f"
            ]
        ]
    },
    {
        "id": "6e89c57ff2394507",
        "type": "function",
        "z": "356ea6f4c1f619bc",
        "name": "Check Plant Sensor Data",
        "func": "const PLANTS = JSON.parse(env.get('PLANT_SENSORS'));\n\nconst plantSensorsThresholds = {}\nconst greenhouseSensorsThresholds = {}\n\nPLANTS.map(sensorConfig =>{\n    plantSensorsThresholds[sensorConfig.name] = {\n        min:sensorConfig.threshold_min,\n        max:sensorConfig.threshold_max,\n        unit:sensorConfig.unit\n    }\n})\n\nconst telegramMessage = {\n    payload:{\n        chatId: env.get('CHAT_ID'),\n        type:\"message\",\n        content: ``\n    }\n}\n\nconst sensorAlerts = new Map()\n\n\nmsg.payload.forEach(data => {\n    if(!data['plant_id']){\n        return\n    }\n    const value = data._value\n    const greenhouse = data.greenhouse_id\n    const plant = data.plant_id\n    const sensorType = data.sensor_type\n    const topic = `/greenhouse_${greenhouse}/plant_${plant}/${sensorType}`\n    const threshold_sensor = plantSensorsThresholds[sensorType];\n    if (value > threshold_sensor.max || value < threshold_sensor.min) {\n        sensorAlerts.set(topic, value);\n    }\n});\n\nconsole.log(`Plant Alerts :`, sensorAlerts)\n\nsensorAlerts.forEach((value, key) =>{\n    const splittedTopic = key.split(\"/\").filter(v => v.length > 0)\n    telegramMessage.payload.content += \n        `Alert for ${splittedTopic[1]} in ${splittedTopic[0]}!\n        A value of ${value}${plantSensorsThresholds[splittedTopic[2]].unit} for ${splittedTopic[2]} was detected!\\n`\n})\nreturn telegramMessage;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 160,
        "wires": [
            [
                "2741cadd25e52534"
            ]
        ]
    },
    {
        "id": "c02720065eda1165",
        "type": "function",
        "z": "356ea6f4c1f619bc",
        "name": "Check Greenhouse Sensor Data",
        "func": "const GREENHOUSES = JSON.parse(env.get('GREENHOUSE_SENSORS'))\n\nconst greenhouseSensorsThresholds = {}\n\nGREENHOUSES.map(sensorConfig => {\n    greenhouseSensorsThresholds[sensorConfig.name] = {\n        min: sensorConfig.threshold_min,\n        max: sensorConfig.threshold_max,\n        unit: sensorConfig.unit,\n        lethalLimit: sensorConfig['lethal_limit']\n    }\n})\n\nconst telegramMessage = {\n    payload:{\n        chatId: env.get('CHAT_ID'),\n        type:\"message\",\n        content: ``\n    }\n}\n\nconst greehouseSensorAlerts = new Map()\n\n\nmsg.payload.forEach(data => {\n    if(data['plant_id']){\n        return\n    }\n    const value = data._value\n    const greenhouse = data.greenhouse_id\n    const sensorType = data.sensor_type\n    const topic = `/greenhouse_${greenhouse}/${sensorType}`\n    const threshold_sensor = greenhouseSensorsThresholds[sensorType];\n    if (value > threshold_sensor.max || value < threshold_sensor.min) {\n        greehouseSensorAlerts.set(topic, value);\n    }\n});\n\nconsole.log(`Greenhouse Alerts :`, greehouseSensorAlerts)\n\ngreehouseSensorAlerts.forEach((value, key) =>{\n    const splittedTopic = key.split(\"/\").filter(v => v.length > 0)\n    telegramMessage.payload.content += \n        `Alert for ${splittedTopic[0]}!\n        A value of ${value}${greenhouseSensorsThresholds[splittedTopic[1]].unit} for ${splittedTopic[1]} was detected!\\n`\n})\nreturn telegramMessage;",
        "outputs": 1,
        "timeout": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 260,
        "wires": [
            [
                "2741cadd25e52534"
            ]
        ]
    },
    {
        "id": "2fa9ba4944daa153",
        "type": "mqtt in",
        "z": "d0f616a33e4a23c2",
        "name": "",
        "topic": "/action_notification",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "61699ef14cb42f13",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 160,
        "wires": [
            [
                "efb801b1547a95ad"
            ]
        ]
    },
    {
        "id": "2a84092a82eaac65",
        "type": "telegram sender",
        "z": "d0f616a33e4a23c2",
        "name": "Send Alerts to User",
        "bot": "662fd1abba56a419",
        "haserroroutput": false,
        "outputs": 1,
        "x": 730,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "efb801b1547a95ad",
        "type": "function",
        "z": "d0f616a33e4a23c2",
        "name": "Check Plant Sensor Data",
        "func": "const telegramMessage = {\n    payload:{\n        chatId: env.get('CHAT_ID'),\n        type:\"message\",\n        content: msg.payload.value\n    }\n}\n\nreturn telegramMessage;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 160,
        "wires": [
            [
                "2a84092a82eaac65"
            ]
        ]
    }
]