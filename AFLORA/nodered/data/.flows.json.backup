[
    {
        "id": "356ea6f4c1f619bc",
        "type": "tab",
        "label": "Telegram Alert System Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "662fd1abba56a419",
        "type": "telegram bot",
        "botname": "FLORA_BOT",
        "usernames": "LucaMF",
        "chatids": "${CHAT_ID}",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "addressfamily": "",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "edf1038d908d0e6f",
        "type": "influxdb",
        "hostname": "172.30.0.102",
        "port": "8086",
        "protocol": "http",
        "database": "forestsensors",
        "name": "IoT_Influx",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://host.docker.internal:8086",
        "timeout": "",
        "rejectUnauthorized": true
    },
    {
        "id": "2741cadd25e52534",
        "type": "telegram sender",
        "z": "356ea6f4c1f619bc",
        "name": "Send Alerts to User",
        "bot": "662fd1abba56a419",
        "haserroroutput": false,
        "outputs": 1,
        "x": 830,
        "y": 160,
        "wires": [
            [
                "882931460110c834"
            ]
        ]
    },
    {
        "id": "882931460110c834",
        "type": "debug",
        "z": "356ea6f4c1f619bc",
        "name": "Debug Telegram Bot",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 80,
        "wires": []
    },
    {
        "id": "5fe460c06e16102f",
        "type": "influxdb in",
        "z": "356ea6f4c1f619bc",
        "influxdb": "edf1038d908d0e6f",
        "name": "Access InfluxDB",
        "query": "from(bucket: \"FLORA\")\n|> range(start: -6s)\n|> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "FLORA",
        "x": 340,
        "y": 160,
        "wires": [
            [
                "db556ada97593f4e",
                "6e89c57ff2394507"
            ]
        ]
    },
    {
        "id": "db556ada97593f4e",
        "type": "debug",
        "z": "356ea6f4c1f619bc",
        "name": "Debug InfluxDB",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 80,
        "wires": []
    },
    {
        "id": "0315a041e107c085",
        "type": "inject",
        "z": "356ea6f4c1f619bc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "5fe460c06e16102f"
            ]
        ]
    },
    {
        "id": "6e89c57ff2394507",
        "type": "function",
        "z": "356ea6f4c1f619bc",
        "name": "Check Sensor Data",
        "func": "const THRESHOLDS = JSON.parse(env.get('SENSORS'));\nconst sensorsThresholds = {}\nTHRESHOLDS.sensors.map(sensorConfig =>{\n    sensorsThresholds[sensorConfig.name] = {\n        min:sensorConfig.threshold_min,\n        max:sensorConfig.threshold_max,\n        unit:sensorConfig.unit\n    }\n})\nconst telegramMessage = {\n    payload:{\n        chatId: env.get('CHAT_ID'),\n        type:\"message\",\n        content: ``\n    }\n}\n\nconst sensorAlerts = new Map()\n\n\nmsg.payload.forEach(data => {\n    const value = data._value\n    const topic = data.topic\n    const sensorType = data.sensor_type\n    const threshold_sensor = sensorsThresholds[sensorType];\n    if (value > threshold_sensor.max || value < threshold_sensor.min) {\n        sensorAlerts.set(topic, value);\n    }\n});\nsensorAlerts.forEach((value, key) =>{\n    const splittedTopic = key.split(\"/\")\n    telegramMessage.payload.content += \n        `Alert for ${splittedTopic[2]} in ${splittedTopic[1]}!\n        A value of ${value}${sensorsThresholds[splittedTopic[3]].unit} for ${splittedTopic[3]} was detected!\\n`\n})\nreturn telegramMessage;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 160,
        "wires": [
            [
                "2741cadd25e52534"
            ]
        ]
    }
]